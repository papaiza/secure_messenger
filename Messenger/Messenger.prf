(BigBank2
 (ACC_ID_TCC1 0
  (ACC_ID_TCC1-1 nil 3688293098 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (emptyfun_TCC1 0
  (emptyfun_TCC1-1 nil 3688293098 ("" (termination-tcc) nil nil) nil
   nil))
 (init_state_TCC1 0
  (init_state_TCC1-1 nil 3688293098 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (n const-decl "posnat" BigBank2 nil)
    (ACC_ID type-eq-decl nil BigBank2 nil)
    (set type-eq-decl nil sets nil)
    (emptyset const-decl "set" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   nil))
 (add_account_ft_TCC1 0
  (add_account_ft_TCC1-1 nil 3688293098 ("" (subtype-tcc) nil nil) nil
   nil))
 (add_account_ft_TCC2 0
  (add_account_ft_TCC2-1 nil 3688293098 ("" (subtype-tcc) nil nil)
   ((add const-decl "(nonempty?)" sets nil)) nil))
 (delete_account_ft_TCC1 0
  (delete_account_ft_TCC1-1 nil 3688293098 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (n const-decl "posnat" BigBank2 nil)
    (ACC_ID type-eq-decl nil BigBank2 nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" BigBank2 nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil))
   nil))
 (deposit_ft_TCC1 0
  (deposit_ft_TCC1-1 nil 3688293098 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (n const-decl "posnat" BigBank2 nil)
    (ACC_ID type-eq-decl nil BigBank2 nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" BigBank2 nil)
    (POS_DTIME type-eq-decl nil Time nil))
   nil))
 (deposit_ft_TCC2 0
  (deposit_ft_TCC2-1 nil 3688293098 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (n const-decl "posnat" BigBank2 nil)
    (ACC_ID type-eq-decl nil BigBank2 nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" BigBank2 nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (bank_ft_TCC1 0
  (bank_ft_TCC1-1 nil 3688293098 ("" (cond-disjoint-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" BigBank2 nil)
    (DTIME type-eq-decl nil Time nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (bank_ft_TCC2 0
  (bank_ft_TCC2-1 nil 3688293098 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" BigBank2 nil)
    (DTIME type-eq-decl nil Time nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (inv1_add_account 0
  (inv1_add_account-1 nil 3688293134
   ("" (skeep)
    (("" (skeep)
      (("" (expand "inv1")
        (("" (expand "add_account_ft")
          (("" (split -2)
            (("1" (flatten)
              (("1" (skeep)
                (("1" (replace -1 2)
                  (("1" (simplify)
                    (("1" (lift-if 2)
                      (("1" (split 2)
                        (("1" (assert) nil nil)
                         ("2" (flatten)
                          (("2" (inst -2 "id!2") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (skeep)
                (("2" (inst -3 "id!2")
                  (("1" (replace -2) (("1" (propax) nil nil)) nil)
                   ("2" (typepred "id!2")
                    (("2" (replace -5) (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (add_account_ft const-decl "bool" BigBank2 nil)
    (id!2 skolem-const-decl "(st(i + 1)`accs)" BigBank2 nil)
    (i skolem-const-decl "DTIME[delta]" BigBank2 nil)
    (st skolem-const-decl "[DTIME[delta] -> STATE]" BigBank2 nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (STATE type-eq-decl nil BigBank2 nil)
    (NAME nonempty-type-decl nil BigBank2 nil)
    (set type-eq-decl nil sets nil) (DTIME type-eq-decl nil Time nil)
    (delta const-decl "posreal" BigBank2 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (ACC_ID type-eq-decl nil BigBank2 nil)
    (n const-decl "posnat" BigBank2 nil)
    (<= const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (inv1 const-decl "bool" BigBank2 nil))
   shostak))
 (inv1_delete_account 0
  (inv1_delete_account-1 nil 3688293829
   ("" (skeep)
    (("" (expand "inv1")
      (("" (expand "delete_account_ft")
        (("" (split)
          (("1" (flatten)
            (("1" (skeep)
              (("1" (replace -2)
                (("1" (simplify)
                  (("1" (typepred "id!2")
                    (("1" (expand "restrict")
                      (("1" (inst -6 "id!2") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (replace -1)
              (("2" (replace -1 2 RL)
                (("2" (skeep)
                  (("2" (inst -2 "id!2")
                    (("1" (reveal -1)
                      (("1" (typepred "id!2")
                        (("1" (replace -5 -3) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inv1 const-decl "bool" BigBank2 nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (restrict const-decl "R" restrict nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (n const-decl "posnat" BigBank2 nil)
    (ACC_ID type-eq-decl nil BigBank2 nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" BigBank2 nil)
    (DTIME type-eq-decl nil Time nil) (set type-eq-decl nil sets nil)
    (NAME nonempty-type-decl nil BigBank2 nil)
    (STATE type-eq-decl nil BigBank2 nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (st skolem-const-decl "[DTIME[delta] -> STATE]" BigBank2 nil)
    (i skolem-const-decl "DTIME[delta]" BigBank2 nil)
    (id!2 skolem-const-decl "(st(i + 1)`accs)" BigBank2 nil)
    (delete_account_ft const-decl "bool" BigBank2 nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (inv1_deposit 0
  (inv1_deposit-1 nil 3688293356
   ("" (skeep)
    (("" (skeep)
      (("" (expand "inv1")
        (("" (expand "deposit_ft")
          (("" (split -2)
            (("1" (flatten)
              (("1" (skeep)
                (("1" (typepred "id!2")
                  (("1" (replace -6)
                    (("1" (simplify)
                      (("1" (lift-if 1)
                        (("1" (split 1)
                          (("1" (inst -7 "id!1")
                            (("1" (assert) nil nil)) nil)
                           ("2" (inst -7 "id!2")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (skeep)
                (("2" (typepred "id!2")
                  (("2" (replace -4) (("2" (inst -5 "id!2") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (deposit_ft const-decl "bool" BigBank2 nil)
    (st skolem-const-decl "[DTIME[delta] -> STATE]" BigBank2 nil)
    (i skolem-const-decl "DTIME[delta]" BigBank2 nil)
    (id!2 skolem-const-decl "(st(i + 1)`accs)" BigBank2 nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (STATE type-eq-decl nil BigBank2 nil)
    (NAME nonempty-type-decl nil BigBank2 nil)
    (set type-eq-decl nil sets nil) (DTIME type-eq-decl nil Time nil)
    (delta const-decl "posreal" BigBank2 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (ACC_ID type-eq-decl nil BigBank2 nil)
    (n const-decl "posnat" BigBank2 nil)
    (<= const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (inv1 const-decl "bool" BigBank2 nil))
   shostak))
 (inv1_check 0
  (inv1_check-1 nil 3688315673
   ("" (skeep)
    (("" (induct "i")
      (("1" (expand "inv1")
        (("1" (expand "bank_ft")
          (("1" (skeep)
            (("1" (typepred "id!1")
              (("1" (inst -4 0)
                (("1" (assert)
                  (("1" (expand "init_state") (("1" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "bank_ft")
        (("2" (skeep)
          (("2" (expand "inv1")
            (("2" (skeep)
              (("2" (inst -2 "j+1")
                (("2" (split)
                  (("1" (flatten)
                    (("1" (expand "init_state")
                      (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (flatten)
                    (("2" (inst -2 "id!1")
                      (("1" (assert) (("1" (grind) nil nil)) nil)
                       ("2" (case "cmd(j+1) = deposit(id!1,0)")
                        (("1" (assert)
                          (("1" (expand "deposit_ft")
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (case "cmd(j+1) = delete_account(id!1)")
                          (("1" (assert)
                            (("1" (expand "delete_account_ft")
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "cmd(j+1) = withdraw(id!1,0)")
                            (("1" (assert)
                              (("1"
                                (expand "withdraw_ft")
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (grind)
                              (("1"
                                (typepred "id!1")
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (grind)
                                (("2"
                                  (typepred "id!1")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" BigBank2 nil)
    (DTIME type-eq-decl nil Time nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (n const-decl "posnat" BigBank2 nil)
    (ACC_ID type-eq-decl nil BigBank2 nil)
    (set type-eq-decl nil sets nil)
    (NAME nonempty-type-decl nil BigBank2 nil)
    (STATE type-eq-decl nil BigBank2 nil)
    (inv1 const-decl "bool" BigBank2 nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (bank_ft const-decl "bool" BigBank2 nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (init_state const-decl "STATE" BigBank2 nil)
    (st skolem-const-decl "[DTIME[delta] -> STATE]" BigBank2 nil)
    (j skolem-const-decl "nat" BigBank2 nil)
    (id!1 skolem-const-decl "(st(j + 1)`accs)" BigBank2 nil)
    (add_account_ft const-decl "bool" BigBank2 nil)
    (delete_account_ft const-decl "bool" BigBank2 nil)
    (deposit_ft const-decl "bool" BigBank2 nil)
    (withdraw_ft const-decl "bool" BigBank2 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (restrict const-decl "R" restrict nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (delete_account? adt-recognizer-decl "[COMMAND -> boolean]"
     BigBank2 nil)
    (delete_account adt-constructor-decl
     "[ACC_ID -> (delete_account?)]" BigBank2 nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (withdraw adt-constructor-decl "[[ACC_ID, real] -> (withdraw?)]"
     BigBank2 nil)
    (withdraw? adt-recognizer-decl "[COMMAND -> boolean]" BigBank2 nil)
    (deposit adt-constructor-decl "[[ACC_ID, real] -> (deposit?)]"
     BigBank2 nil)
    (deposit? adt-recognizer-decl "[COMMAND -> boolean]" BigBank2 nil)
    (POS_DTIME type-eq-decl nil Time nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (COMMAND type-decl nil BigBank2 nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (use_case1_TCC1 0
  (use_case1_TCC1-1 nil 3688293098 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (init_state const-decl "STATE" BigBank2 nil))
   nil))
 (use_case1 0
  (use_case1-1 nil 3688294309
   ("" (skeep)
    (("" (copy -3)
      (("" (copy -1)
        (("" (inst -5 1)
          (("" (inst -2 2)
            (("" (inst -1 3) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" BigBank2 nil)
    (DTIME type-eq-decl nil Time nil)
    (emptyset const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (remove const-decl "set" sets nil)
    (add_account_ft const-decl "bool" BigBank2 nil)
    (delete_account_ft const-decl "bool" BigBank2 nil)
    (init_state const-decl "STATE" BigBank2 nil)
    (bank_ft const-decl "bool" BigBank2 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak)))

