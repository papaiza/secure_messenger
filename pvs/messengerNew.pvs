messengerNew: THEORY
BEGIN

	delta: posreal
	IMPORTING Time[delta]
	i: VAR DTIME

	U_ID : TYPE+
	M_ID : TYPE+
	G_ID : TYPE+

	STATUS : TYPE = {ok, error}
	
	NAME : TYPE+
	TEXT : TYPE+
	
	COMMAND: DATATYPE
	 BEGIN
		add_user(id:U_ID, n: NAME)			:add_user?
    		  add_group(id:G_ID,n: NAME)			:add_group?
		  register_user(uid:U_ID,gid:G_ID)		:register_user?
		  send_message(uid:U_ID,gid:G_ID,txt:TEXT)	:send_message?
      		  read_message(uid:U_ID,mid:M_ID)		:read_message?
      		  delete_message(uid:U_ID,mid:M_ID)		:delete_message?
      		  set_message_preview(n:integer)		:set_message_preview?
      		  list_new_messages(uid:U_ID)			:list_new_messages?
      		  list_old_messages(uid:U_ID)			:list_old_messages?
      		  list_groups					:list_groups?
      		  list_users					:list_users?
	 END COMMAND
	cmd:  VAR [POS_DTIME -> COMMAND]

	GROUP_INFO: TYPE = 
		    [# users: set[U_ID]
	   	      ,name: NAME
	  	      #]

	  MESSAGE_INFO: TYPE = 
	  	[# sender: U_ID
		  ,recipient: G_ID
		  ,read_users : set[U_ID]
		  ,unread_users : set[U_ID]
		  ,content: TEXT
		   #]


	STATE: TYPE =
   	 [# user_ids	    : set[U_ID]      % Accounts
   	    ,group_ids    : set[G_ID] % Names
   	    ,message_ids  : set[M_ID]
      	    ,user	    : [(user_ids) -> NAME]
      	    ,group	    : [(group_ids) -> GROUP_INFO[set[U_ID],NAME]]
      	    ,message	    : [(message_ids) -> MESSAGE_INFO[U_ID,G_ID,set[U_ID],set[U_ID],TEXT]] 	    
          #]

	   st : VAR [ DTIME -> STATE ]

  % Definition of an empty function
  emptyfun [T, U : TYPE] (x : {x : T | FALSE}) : RECURSIVE U = 
    emptyfun(x) 
    MEASURE (LAMBDA (x : {x : T | FALSE}): 1) 

  init_state: STATE = 
   (# user_ids 	    := emptyset
    , group_ids	    := emptyset 
    , message_ids   := emptyset
    , user 	    := emptyfun
    , group 	    := emptyfun
    , message 	    := emptyfun
    #)

 add_user_ft(id:U_ID,n:NAME)(st)(i:POS_DTIME): bool = 
    	COND
		NOT st(i-1)`user_ids(id) ->
			    st(i) = (#  user_ids := add(id, user_ids_)
			    	       ,user := user_ WITH [id := n]
				       ,message_ids := message_ids_
				       ,message := message_
				       ,group_ids := group_ids_
				       ,group := group_
				     #),
			st(i-1)`user_ids(id) -> st(i) = st(i-1)		
	ENDCOND
	where
		user_ids_ = st(i-1)`user_ids,
		user_ = st(i-1)`user,
		group_ids_ = st(i-1)`group_ids,
		group_ = st(i-1)`group,
		message_ids_ = st(i-1)`message_ids,
		message_ = st(i-1)`message

 add_group_ft(id:G_ID,n:NAME)(st)(i:POS_DTIME): bool = 
    	COND
		NOT st(i-1)`group_ids(id) ->
			    st(i) = (#  group_ids := add(id, group_ids_)
			    	       ,group := group_ WITH [id := (emptyset,n)]
				       ,message_ids := message_ids_
				       ,message := message_
				       ,user_ids := user_ids_
				       ,user := user_
				     #),
			st(i-1)`group_ids(id) -> st(i) = st(i-1)
	ENDCOND
	where
		user_ids_ = st(i-1)`user_ids,
		user_ = st(i-1)`user,
		group_ids_ = st(i-1)`group_ids,
		group_ = st(i-1)`group,
		message_ids_ = st(i-1)`message_ids,
		message_ = st(i-1)`message

    % what must be added is the user id to the set within the group id 

    register_user_ft(uid:U_ID,gid:G_ID)(st)(i:POS_DTIME): bool = 
    	COND
		st(i-1)`user_ids(uid) AND st(i-1)`group_ids(gid)->
				     st(i) = (# group := group_ WITH [gid := (add(uid,old_set_users),old_name)] 
				     	      ,message_ids := message_ids_
				       	      ,message := message_
				       	      ,user_ids := user_ids_
				       	      ,user := user_
					      ,group_ids := group_ids_
				     #),
		NOT(st(i-1)`user_ids(id) AND st(i-1)`group_ids(id)) -> st(i) = st(i-1)		
	ENDCOND
	where
		user_ids_ = st(i-1)`user_ids,
		user_ = st(i-1)`user,
		group_ids_ = st(i-1)`group_ids,
		group_ = st(i-1)`group,
		message_ids_ = st(i-1)`message_ids,
		message_ = st(i-1)`message

   % to send a message, you add a message to the set of messages, store the id of the user, the group, the ids who have read this message and those who have not read the message

	send_message_ft(uid:U_ID,gid:G_ID,text:TEXT)(st)(i:POS_DTIME): bool = 
    	COND
		st(i-1)`user_ids(uid) AND st(i-1)`group_ids(gid)->
				     st(i) = (# group := group_ 
				     	      ,message_ids := message_ids_
				       	      ,message := message_
				       	      ,user_ids := user_ids_
				       	      ,user := user_
					      ,group_ids := group_ids_
				     #),
		NOT(st(i-1)`user_ids(id) AND st(i-1)`group_ids(id)) -> st(i) = st(i-1)		
	ENDCOND
	where
		user_ids_ = st(i-1)`user_ids,
		user_ = st(i-1)`user,
		group_ids_ = st(i-1)`group_ids,
		group_ = st(i-1)`group,
		message_ids_ = st(i-1)`message_ids,
		message_ = st(i-1)`message
	
	read_message_ft(uid:U_ID,mid:M_ID)(st)(i:POS_DTIME): bool =
	COND
		st(i-1)`user_ids(uid) AND st(i-1)`group_ids(gid)->
				     st(i) = (# group := group_ 
				     	      ,message_ids := message_ids_
				       	      ,message := message_
				       	      ,user_ids := user_ids_
				       	      ,user := user_
					      ,group_ids := group_ids_
				     #),
		NOT(st(i-1)`user_ids(id) AND st(i-1)`group_ids(id)) -> st(i) = st(i-1)		
	ENDCOND
	where
		user_ids_ = st(i-1)`user_ids,
		user_ = st(i-1)`user,
		group_ids_ = st(i-1)`group_ids,
		group_ = st(i-1)`group,
		message_ids_ = st(i-1)`message_ids,
		message_ = st(i-1)`message



	delete_message_ft(uid:U_ID,mid:M_ID)(st)(i:POS_DTIME): bool =
	COND
		st(i-1)`user_ids(uid) AND st(i-1)`group_ids(gid)->
				     st(i) = (# group := group_ 
				     	      ,message_ids := message_ids_
				       	      ,message := message_
				       	      ,user_ids := user_ids_
				       	      ,user := user_
					      ,group_ids := group_ids_
				     #),
		NOT(st(i-1)`user_ids(id) AND st(i-1)`group_ids(id)) -> st(i) = st(i-1)		
	ENDCOND
	where
		user_ids_ = st(i-1)`user_ids,
		user_ = st(i-1)`user,
		group_ids_ = st(i-1)`group_ids,
		group_ = st(i-1)`group,
		message_ids_ = st(i-1)`message_ids,
		message_ = st(i-1)`message

	set_message_preview_ft(n:integer)(st)(i:POS_DTIME): bool = 
	COND
		st(i-1)`user_ids(uid) AND st(i-1)`group_ids(gid)->
				     st(i) = (# group := group_ 
				     	      ,message_ids := message_ids_
				       	      ,message := message_
				       	      ,user_ids := user_ids_
				       	      ,user := user_
					      ,group_ids := group_ids_
				     #),
		NOT(st(i-1)`user_ids(id) AND st(i-1)`group_ids(id)) -> st(i) = st(i-1)		
	ENDCOND
	where
		user_ids_ = st(i-1)`user_ids,
		user_ = st(i-1)`user,
		group_ids_ = st(i-1)`group_ids,
		group_ = st(i-1)`group,
		message_ids_ = st(i-1)`message_ids,
		message_ = st(i-1)`message

END messengerNew
